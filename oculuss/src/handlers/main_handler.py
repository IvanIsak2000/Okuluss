from aiogram import Router, F
from aiogram import types
from aiogram.filters import Command
from aiogram.enums import ParseMode
from aiogram.filters import StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram import types
from aiogram.types import URLInputFile


from kb.make_inline_keyboard import (
    make_inline_keyboard_to_timetable, 
    make_menu
)
from kb.make_keyboard import make_keyboard
from kb.make_inline_library_keyboard import make_inline_library_keyboard
from kb.make_inline_keyboard import (
    make_support_keyboard,
    make_link_to_profile_article,
    make_knowledge_keyboard,
    make_to_menu_keyboard
)
from utils.texts import (
    welcome_main,
    for_library,
    timetable_info,
    course_info,
    help_info,
    you_are_not_access_user
)
from utils.db.user import get_user_experience
from utils.db.accept_record import get_user_accept_history
from utils.db.user import get_user_position_by_experience
from utils.db.stack import get_stacks_titles
from utils.other.emoji import send_emoji
from utils.db.quiz import new_quiz_is_available

router = Router()
start_text = '''
üëΩ –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é –¢–µ–±—è, –ø—É—Ç–Ω–∏–∫

–° —ç—Ç–æ–π –º–∏–Ω—É—Ç—ã –Ø –¢–≤–æ–π –º–µ–Ω–µ–¥–∂–µ—Ä –ø–æ –¥–æ–±–∞–≤–∫–∞–º.
–ú–æ–∂–µ—à—å: –∏–∑—É—á–∞—Ç—å –¥–æ–±–∞–≤–∫–∏, –æ—Ü–µ–Ω–∏–≤–∞—Ç—å –∏—Ö, 
–ø—Ä–∏–æ–±—Ä–µ—Ç–∞—Ç—å –≥–æ—Ç–æ–≤—ã–µ —Å—Ç–∞–∫–∏, 
–ø—Ä–æ–≤–µ—Ä—è—Ç—å —Å–≤–æ–∏ –∑–Ω–∞–Ω–∏—è –≤ –•—Ä–∞–º–µ, 
—É—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å –≤ —Ä–µ–π—Ç–∏–Ω–≥–µ –ª—É—á—à–∏—Ö –∏ –µ—â—ë –≤—Å—è–∫–æ–≥–æ.
'''

@router.message(Command('start'))
async def start(
    message: types.Message,
    state: FSMContext
):
    await state.clear()
    await send_emoji(
        message=message,
    )
    builder = InlineKeyboardBuilder()
    builder.row(
        types.InlineKeyboardButton(
            text='–í –º–µ–Ω—é',
            callback_data='menu'
        )
    )
    await message.answer(
        text=start_text,
        reply_markup=builder.as_markup()
    )


@router.callback_query(
    F.data =='start'
)
async def start_callback(
    callback: types.CallbackQuery,
    state: FSMContext
):
    await state.clear()
    await send_emoji(
        callback=callback,
    )
    builder = InlineKeyboardBuilder()
    builder.row(
        types.InlineKeyboardButton(
            text='–î–∞–ª—å—à–µ...',
            callback_data='menu'
        )
    )
    await callback.message.answer(
        text=start_text,
        reply_markup=builder.as_markup()
    )


@router.callback_query(
    F.data == 'menu'
)
async def menu(callback: types.CallbackQuery, state: FSMContext):
    """–í—Å—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —é–∑–µ—Ä–µ –ø–ª—é—Å –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é"""

    await send_emoji(
        callback=callback,
        emoji='ü¶ç'
    )
    await state.clear()

    result = await get_user_accept_history(user_id=callback.from_user.id)
    try:
        percent = f'{int(result["successful"] / result["common"]*100)}%'
    except ZeroDivisionError:
        percent = '-'

    await callback.message.answer_photo(
        photo=URLInputFile(url='https://s3.timeweb.cloud/5e7808f1-s3store/logos/menu_logo.jpeg'),
        caption=f'''
<strong>–ù–∏–∫:</strong> <a href="https://t.me/{callback.from_user.username}">{callback.from_user.username}</a>
<strong>ID:</strong> <code>{callback.from_user.id}</code>
<strong>–ö–ª–∞–Ω:</strong> –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω (—Ç—Ä–µ–±—É–µ—Ç—Å—è 10 Lvl)

<strong>üèÜ –ó–≤–∞–Ω–∏–µ:</strong> –ú–∞—Å–∫–∞—Ä—è–Ω
<strong>üèÖ –ú–µ—Å—Ç–æ:</strong> {await get_user_position_by_experience(user_id=callback.from_user.id)} –º–µ—Å—Ç–æ

<strong>‚≠ê Lvl:</strong> {1}
<strong>üåÄ –¢–≤–æ–π –æ–ø—ã—Ç:</strong> {await get_user_experience(user_id=callback.from_user.id)}
<strong>üíé –¢–≤–æ—è —Ä–µ–ø—É—Ç–∞—Ü–∏—è –ø—Ä–∏—ë–º–æ–≤:</strong> {percent} [—É—Å–ø–µ—à–Ω—ã–µ - {result['successful']} –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã–µ - {result['passed']}

–û–ø—ã—Ç –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—á–∫–æ–≤ –∑–∞ –∫–∞–∂–¥–æ–µ —Å–æ–≤–µ—Ä—à—ë–Ω–Ω–æ–µ —É—Å–ø–µ—à–Ω–æ–µ 
–¥–µ–π—Å—Ç–≤–∏—è, –¢–≤–æ–π —É—Ä–æ–≤–µ–Ω—å –Ω–∞–ø—Ä—è–º—É—é –∑–∞–≤–∏—Å–∏—Ç –æ—Ç —Ç–≤–æ–µ–≥–æ –û–ø—ã—Ç–∞
–†–µ–ø—É—Ç–∞—Ü–∏—è –æ—Ç—Ä–∞–∂–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—Å–ø–µ—à–Ω—ã—Ö –ø—Ä–∏—ë–º—ã.

''',
        parse_mode=ParseMode.HTML,
        reply_markup=await make_menu(),
        disable_web_page_preview=True
    )


@router.callback_query(
    F.data == 'library'
)
async def library(callback: types.CallbackQuery, state: FSMContext):
    await send_emoji(
        callback=callback,
        emoji='üìö'
    )
    await state.clear()
    await callback.message.answer(
        text=for_library,
        reply_markup=await make_inline_library_keyboard()
    )


@router.callback_query(
    F.data == 'knowledge'
)
async def knowledge(callback: types.CallbackQuery, state: FSMContext):
    await send_emoji(
        callback=callback,
        emoji='üèõÔ∏è'
    )
    await state.clear()

    res = await new_quiz_is_available(user_id=callback.from_user.id)

    if res == True or res == None:
    # if 1:
        await callback.message.answer(
            text='''
–ü—Ä–∏—Ö–æ–¥–∏—Ç–µ –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ –•—Ä–∞–º –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–≤–æ–∏—Ö –∑–Ω–∞–Ω–∏–π 
–æ –¥–æ–±–∞–≤–∫–∞—Ö.

–ó–∞ –∫–∞–∂–¥—ã–π –≤–µ—Ä–Ω—ã–π –æ—Ç–≤–µ—Ç - –Ω–∞—á–∏—Å–ª—é –æ–ø—ã—Ç–∞
''',
            reply_markup=await make_knowledge_keyboard()
        )
    else:
        await callback.message.answer(
            text='üßô‚Äç‚ôÇÔ∏è –ú—É–¥—Ä–µ—Ü —É–∂–µ —É—à—ë–ª –∏–∑ –•—Ä–∞–º–∞, –ø—Ä–∏—Ö–æ–¥–∏ —á–µ—Ä–µ–∑ 24 —á–∞—Å–∞',
            reply_markup=await make_to_menu_keyboard()
        )


@router.callback_query(
    F.data == 'timetable')
async def timetable(callback: types.CallbackQuery, state: FSMContext):
    await send_emoji(
        callback=callback,
        emoji='‚åõ'
    )
    await state.clear()
    """Show timetable for user"""
    await callback.message.answer(
        text=timetable_info,
        reply_markup=await make_inline_keyboard_to_timetable(user_id=callback.from_user.id),
        parse_mode=ParseMode.MARKDOWN
    )


@router.callback_query(
    F.data == 'stacks'
)
async def _stacks(callback: types.CallbackQuery, state: FSMContext):
    await send_emoji(
        callback=callback,
        emoji='üß∞'
    )
    await state.clear()
    await callback.message.answer(
        text='''
–°–∞–º—ã–µ –ø–æ–ª–µ–∑–Ω—ã–µ —Å—Ç–∞–∫–∏, –∫–æ—Ç–æ—Ä—ã–µ —Ç–æ–ª—å–∫–æ –º–æ–∂–Ω–æ –Ω–∞–π—Ç–∏ (—Å–º–æ—Ç—Ä–∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É). 

–í –∫–æ–Ω—Ü–µ –∫–∞–∂–¥–æ–≥–æ —Å—Ç–∞–∫–∞ –µ—Å—Ç—å –∫–Ω–æ–ø–∫–∞ –¥–ª—è –∑–∞–∫–∞–∑–∞ –ø–æ–ª–Ω–æ–≥–æ —Å—Ç–∞–∫–∞ (–æ–±—ã—á–Ω–æ —ç—Ç–æ Ozon –∫–æ—Ä–∑–∏–Ω–∞ )''',
        reply_markup=await make_keyboard(
            items=await get_stacks_titles()))


@router.callback_query(
    F.data == 'clans'
)
async def clans(callback: types.CallbackQuery, state: FSMContext):
    await send_emoji(
        callback=callback,
    )
    await state.clear()
    await callback.message.answer(
        text='''
<strong>üõ°Ô∏è –ö–ª–∞–Ω—ã</strong>

–í—Å—Ç—É–ø–∞–π—Ç–µ –∏ —Å–æ–∑–¥–∞–≤–∞–π—Ç–µ –∫–ª–∞–Ω—ã, —É—á–∞—Å—Ç–≤—É–π—Ç–µ –≤ –∫–ª–∞–Ω–æ–≤—ã—Ö 
—Å–æ—Å—Ç—è–∑–∞–Ω–∏—è—Ö –∏ –∑–∞—Ö–≤–∞—Ç–∏—Ç–µ –º–∏—Ä.

‚ö†Ô∏è –ö–ª–∞–Ω—ã –Ω–µ –¥–æ—Å—Ç—É–ø–Ω—ã (—Ç—Ä–µ–±—É–µ—Ç—Å—è 10 Lvl)
''',
    parse_mode=ParseMode.HTML,
    reply_markup=await make_to_menu_keyboard()
    )


@router.callback_query(
    F.data == 'feedback'
)
async def _help(callback: types.CallbackQuery, state: FSMContext):
    await  send_emoji(
        callback=callback,
        emoji='ü™ñ'
    )
    await state.clear()
    await callback.message.answer(
        text=help_info,
        reply_markup=await make_support_keyboard()
    )
