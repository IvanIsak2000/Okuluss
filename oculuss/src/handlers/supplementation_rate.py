import asyncio
from aiogram import Router, F
from aiogram import types
from aiogram.fsm.context import FSMContext
from aiogram.enums import ParseMode
from aiogram.fsm.state import StatesGroup, State

from utils.logging.logger import logger

from utils.db.rating import update_supplementation_rate
from utils.db.build_in_supplementation import get_info_from_supplementation_by_id


class RateSupplementation(StatesGroup):
    choose_reaction = State()
    typed_text = State()
    checked = State()


router = Router()


@router.callback_query(
    lambda d: d.data.startswith('react'))
async def rate_supplementation(
        query: types.CallbackQuery,
        state: FSMContext):
    await state.clear()
    reaction_positive = True if 'üëç' in query.data.split(":", maxsplit=1)[1] else False
    supplementation_id_to_react = query.data.split(':')[-1]

    await logger.info(
        f'–ü–æ–ª—É—á–µ–Ω–∞ –æ—Ü–µ–Ω–∫–∞ —é–∑–µ—Ä–∞: —ç—Ç–æ üëç - {reaction_positive} –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å id: {query.from_user.id}')
    if reaction_positive:
        await query.message.answer(
                text='''
‚úçÔ∏è –ï—Å–ª–∏ –í–∞–º –ø–æ–Ω—Ä–∞–≤–∏–ª—Å—è —ç—Ç–æ—Ç –ë–ê–î, —Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ
–∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π, –∫–æ—Ç–æ—Ä—ã–π –±—ã–ª –±—ã –≤–∞–º –ø–æ–ª–µ–∑–µ–Ω –¥–æ —É–ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏—è.


<i>‚ö†Ô∏è –ë—Ä–µ–Ω–¥ –∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã</i>

‚ö° –Ø –∑–∞–º–µ—Ç–∏–ª...
‚ö° –Ø –±—ã –ø–æ—Ä–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–ª –±—ã —Å–µ–±–µ –≤–æ—Ç —ç—Ç–æ...
‚ö° –Ø —É–ø–æ—Ç—Ä–µ–±–ª—è–ª –ø–æ —Å—Ç–æ–ª—å–∫–æ-—Ç–æ –∏ –≤–æ—Ç —á—Ç–æ –ø–æ–ª—É—á–∏–ª–æ—Å—å –∏ —Ç.–¥
''',            parse_mode=ParseMode.HTML)
        await state.update_data(
            react=1,
            supplementation_id=supplementation_id_to_react)
        await state.set_state(RateSupplementation.choose_reaction)
    else:
        await query.message.answer(
            text='''
üö® –ï—Å–ª–∏ –í–∞–º –Ω–µ –ø–æ–Ω—Ä–∞–≤–∏–ª–æ—Å—å —Ç–∞–∫–æ–π –ë–ê–î –∏–ª–∏
–æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω—ã–π —Ç–æ–≤–∞—Ä, —Å–º–µ–ª–æ –ø–∏—à–∏—Ç–µ –¥–æ–Ω–æ—Å.

<i>‚ö†Ô∏è –ë—Ä–µ–Ω–¥ –∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã</i>

‚ùó –ú–Ω–µ –Ω–µ –ø–æ–Ω—Ä–∞–≤–∏–ª–æ—Å—å, –Ω–∞–ø—Ä–∏–º–µ—Ä –≤–∫—É—Å
‚ùó –°—á–∏—Ç–∞—é, —á—Ç–æ –±–µ—Å–ø–æ–ª–µ–∑–Ω–∞—è –¥–æ–∑–∏—Ä–æ–≤–∫–∞
‚ùó –ó–∞–º–µ—Ç–∏–ª –Ω–µ—Ö–æ—Ä–æ—à–∏–µ –ø–æ–±–æ—á–Ω—ã–µ —ç—Ñ—Ñ–µ–∫—Ç—ã –∏ —Ç.–¥
''',
            parse_mode=ParseMode.HTML)
        await state.update_data(
            react=-1,
            supplementation_id=supplementation_id_to_react)
        await state.set_state(RateSupplementation.choose_reaction)


@router.message(
    RateSupplementation.choose_reaction)
async def getting_text(
        message: types.Message,
        state: FSMContext):

    text = message.text
    if not text.startswith('/'):
        await state.set_state(RateSupplementation.typed_text)
        await message.answer('‚è≥ –ú–æ–¥–µ—Ä–∏—Ä—É—é –æ—Ü–µ–Ω–∫—É')

        
        await state.update_data(text=text)
        await logger.info(f'data={await state.get_data()}')

        full_data = await state.get_data()
        supplementation_group = await get_info_from_supplementation_by_id(
                _id=full_data['supplementation_id'])

        await update_supplementation_rate(
            user_id=message.from_user.id,
            username=message.from_user.username,
            supplementation_group=supplementation_group.title,
            rate=full_data['react'])
        await asyncio.sleep(60)    
        await message.answer('‚úÖ –í–∞—à–∞ –æ—Ü–µ–Ω–∫–∞ –∏ –æ—Ç–∑—ã–≤ –ø—Ä–∏–Ω—è—Ç—ã!')
