import asyncio
from aiogram import Router, F
from aiogram import types
from aiogram.fsm.context import FSMContext
from aiogram.enums import ParseMode
from aiogram.fsm.state import StatesGroup, State
from aiogram.filters import StateFilter


from utils.logging.logger import logger
from utils.db.rating import update_supplementation_rate
from utils.db.build_in_supplementation import get_info_from_supplementation_by_id
from utils.other.emoji import send_emoji
from kb.make_inline_keyboard import make_to_menu_keyboard
from utils.db.rating import get_supplementation_rating


class RateSupplementation(StatesGroup):
    choose_reaction = State()
    moderating = State()


router = Router()


@router.callback_query(
    StateFilter(None),
    lambda d: d.data.startswith('react'))
async def rate_supplementation(
        query: types.CallbackQuery,
        state: FSMContext):

    reaction_positive = True if 'üëç' in query.data.split(":", maxsplit=1)[1] else False
    supplementation_id_to_react = query.data.split(':')[-1]

    await logger.info(
        f'–ü–æ–ª—É—á–µ–Ω–∞ –æ—Ü–µ–Ω–∫–∞ —é–∑–µ—Ä–∞: —ç—Ç–æ üëç - {reaction_positive} –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å id: {query.from_user.id}')
    if reaction_positive:
        await query.message.answer(
                text='''
‚úçÔ∏è –ï—Å–ª–∏ –¢–µ–±–µ –ø–æ–Ω—Ä–∞–≤–∏–ª—Å—è —ç—Ç–æ—Ç –ë–ê–î, —Ç–æ –Ω–∞–ø–∏—à–∏
–æ—Ç–∑—ã–≤, –∫–æ—Ç–æ—Ä—ã–π –±—ã–ª –±—ã –ø–æ–ª–µ–∑–µ–Ω –¢–µ–±–µ —Å–∞–º–æ–º—É.


<i>‚ö†Ô∏è –ë—Ä–µ–Ω–¥ –∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã</i>

‚ö° –Ø –∑–∞–º–µ—Ç–∏–ª...
‚ö° –ü–∏—Ç—å –ª—É—á—à–µ –¥–Ω—ë–º, —Ç–∞–∫ –∫–∞–∫ ...
‚ö° –Ø —É–ø–æ—Ç—Ä–µ–±–ª—è–ª –ø–æ —Å—Ç–æ–ª—å–∫–æ-—Ç–æ –∏ –≤–æ—Ç —á—Ç–æ –ø–æ–ª—É—á–∏–ª–æ—Å—å –∏ —Ç.–¥
''',            parse_mode=ParseMode.HTML)
        await state.update_data(
            react=1,
            supplementation_id=supplementation_id_to_react)
        await state.set_state(RateSupplementation.choose_reaction)
    else:
        await query.message.answer(
            text='''
üö® –ï—Å–ª–∏ –¢–µ–±–µ –Ω–µ –ø–æ–Ω—Ä–∞–≤–∏–ª—Å—è —Ç–∞–∫–æ–π –ë–ê–î –∏–ª–∏
–æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω—ã–π —Ç–æ–≤–∞—Ä, —Å–º–µ–ª–æ –ø–∏—à–∏ –¥–æ–Ω–æ—Å.

<i>‚ö†Ô∏è –ë—Ä–µ–Ω–¥ –∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã</i>

‚ùó –ú–Ω–µ –Ω–µ –ø–æ–Ω—Ä–∞–≤–∏–ª—Å—è –≤–∫—É—Å...
‚ùó 2 –≥—Ä–∞–º–º–∞ –º–µ–Ω—è –Ω–µ –±–µ—Ä—É—Ç ...
‚ùó –£ —Ç–∞–∫–æ–≥–æ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—è –Ω–µ –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–π —Ç–æ–≤–∞—Ä... 
''',
            parse_mode=ParseMode.HTML
        )
        await state.update_data(
            react=-1,
            supplementation_id=supplementation_id_to_react)
        await state.set_state(RateSupplementation.choose_reaction)


@router.message(
    RateSupplementation.choose_reaction
)
async def getting_text(
        message: types.Message,
        state: FSMContext
):

    text = message.text
    if not text.startswith('/'):
        await state.set_state(RateSupplementation.moderating)

        emoji_msg = await send_emoji(
            message=message,
            emoji='‚åõ',
        )
        moderation_msg = await message.answer(
            '–ú–æ–¥–µ—Ä–∏—Ä—É—é –æ—Ü–µ–Ω–∫—É'
        )

        
        await state.update_data(text=text)

        full_data = await state.get_data()
        supplementation_group = await get_info_from_supplementation_by_id(
                _id=full_data['supplementation_id'])

        await update_supplementation_rate(
            user_id=message.from_user.id,
            username=message.from_user.username,
            supplementation_group=supplementation_group.title,
            rate=full_data['react'])

        await asyncio.sleep(10)

        await moderation_msg.delete()

        await send_emoji(
            message=message,
            emoji='‚úÖ',
            to_delete=False
        )
        await message.answer('–í–∞—à–∞ –æ—Ü–µ–Ω–∫–∞ –∏ –æ—Ç–∑—ã–≤ –ø—Ä–∏–Ω—è—Ç—ã!')
        await state.clear()


@router.callback_query(
    RateSupplementation.moderating
)
async def if_moderating(
        callback: types.CallbackQuery,
        state: FSMContext
):
    await callback.message.answer(
        text='–î–æ–∂–¥–∏—Ç–µ—Å—å –ø—Ä–µ–¥—ã–¥—É—â–µ–π –º–æ–¥–µ—Ä–∞—Ü–∏–∏!'
    )


@router.callback_query(
    F.data == 'top'
)
async def _top(callback: types.CallbackQuery, state: FSMContext):
    await send_emoji(
        callback=callback,
        emoji='üî•'
    )
    await state.clear()
    await callback.message.answer(
        text=f'''
–†–µ–π—Ç–∏–Ω–≥ –ë–ê–î–æ–≤. –ì–æ–ª–æ—Å—É–π—Ç–µ –∑–∞ —Å–≤–æ—é –ª—é–±–∏–º—ã–µ –ë–ê–î—ã –≤ –º–µ–Ω—é –ë–∏–±–ª–∏–æ—Ç–µ–∫–∏

üî• –î–µ—Å—è—Ç–∫–∞ –ª—É—á—à–∏—Ö –ø–æ –º–Ω–µ–Ω–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
{await get_supplementation_rating()}''',
        reply_markup=await make_to_menu_keyboard())