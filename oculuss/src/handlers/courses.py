# from aiogram import Router
# from aiogram import types
# from aiogram.enums import ParseMode
# from datetime import timedelta

# from utils.logging.logger import logger

# from kb.make_inline_keyboard import (
#     make_inline_select_course_keyboard,
#     make_yes_no_keyboard,
#     make_courses_keyboard,
#     make_inline_keyboard,
#     make_inline_keyboard_to_timetable,
#     make_only_course_managing_keyboard
# )

# from utils.db.course import (
#     add_user_to_course,
#     user_course,
#     remove_user_from_course,
#     user_have_course
# )

# from filters.no_course import (
#     HaveCourse,
#     HaveNotCourse
# )

# from utils.texts import depression_info


# router = Router()


# # @router.callback_query(
# #         
# #         HaveCourse(),
# #         lambda d: d.data.startswith('selected:–£–¥–∞–ª–∏—Ç—å'))
# # async def delete_course(callback: types.CallbackQuery):
# #     await callback.message.answer(
# #         f'üóëÔ∏è –í—ã —É–¥–∞–ª–µ–Ω—ã —Å –∫—É—Ä—Å–∞: {await user_course(message=callback)}. \
# # –ú–æ–∂–µ—Ç–µ –≤—ã–±—Ä–∞—Ç—å –∫—É—Ä—Å –¥–ª—è –∑–∞–ø–∏—Å–∏ –Ω–∏–∂–µ:',
# #         reply_markup=await make_only_course_managing_keyboard())
# #     await remove_user_from_course(message=callback)
# #     await logger.info(f'User {callback.from_user.id} removed from monitoring')

      
# # @router.callback_query(
# #         
# #         lambda d: d.data.startswith('selected:–ú–æ–π'))
# # async def my_course(callback: types.CallbackQuery):
# #     if await user_have_course(message=callback):
# #         await callback.message.answer(
# #             f'üìö –í–∞—à —Ç–µ–∫—É—â–∏–π –∞–∫—Ç–∏–≤–Ω—ã–π –∫—É—Ä—Å: \
# # {await user_course(message=callback)}',
# #             reply_markup=await make_inline_keyboard(['‚ùå –£–¥–∞–ª–∏—Ç—å –∫—É—Ä—Å']),
# #             parse_mode=ParseMode.MARKDOWN)
# #     else:
# #         await callback.message.answer(
# #             text='–£ –≤–∞—Å –Ω–µ –≤—ã–±—Ä–∞–Ω –∫—É—Ä—Å!',
# #             reply_markup=await make_only_course_managing_keyboard())


# # @router.callback_query(
# #         
# #         HaveNotCourse(),
# #         lambda d: d.data.startswith('selected:'))
# # async def selecting_course(callback: types.CallbackQuery):
# #     course_name = callback.data.split(':')[1]
# #     await logger.info(
# #         f'User with id={callback.from_user.id} selected the course: \
# # {course_name} to write')
# #     if '–î–µ–ø—Ä–µ—Å—Å–∏—è' in course_name:
# #         await callback.message.edit_text(
# #             text=depression_info,
# #             reply_markup=await make_inline_select_course_keyboard(
# #                 course_title='–ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫—É—Ä—Å',
# #                 course_name='–î–µ–ø—Ä–µ—Å—Å–∏—è'))


# # @router.callback_query(
# #         
# #         HaveCourse(),
# #         lambda d: d.data.startswith('selected:'))
# # async def user_already_have_course(callback: types.CallbackQuery):
# #     await callback.message.edit_text(
# #         text='‚ö†Ô∏è –í—ã —É–∂–µ –∑–∞–ø–∏—Å–∞–Ω—ã –Ω–∞ –∫—É—Ä—Å! –°—Ç–µ—Ä–µ—Ç—å –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –æ–± –ø—Ä–æ—à–ª–æ–º –∫—É—Ä—Å–µ?',
# #         reply_markup=await make_yes_no_keyboard())


# # @router.callback_query(
# #         
# #         HaveNotCourse(),
# #         lambda d: d.data.startswith('course_name:'))
# # async def user_selected_course(callback: types.CallbackQuery):

# #     user_write_in_course = callback.data.split(':')[1]
# #     await add_user_to_course(
# #         message=callback,
# #         course_name=user_write_in_course,
# #     )
# #     await callback.message.edit_text(
# #         text=f'‚úÖ –¢–µ–ø–µ—Ä—å –≤—ã –∑–∞–ø–∏—Å–∞–Ω—ã –Ω–∞ –∫—É—Ä—Å: {user_write_in_course}\n\
# # –í–∞—à–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–æ –ø–æ –¥–Ω—è–º.\n–ü–µ—Ä–≤—ã–π –æ–ø—Ä–æ—Å –ø—Ä–∏—à–ª—ë–º \
# # –∑–∞–≤—Ç—Ä–∞ —É—Ç—Ä–æ–º!',
# #         reply_markup=await make_only_course_managing_keyboard())


# # @router.callback_query(
# #         
# #         HaveCourse(),
# #         lambda d: d.data.startswith('confirm:'))
# # async def confirm_to_remove(callback: types.CallbackQuery):
# #     confirm = callback.data.split('confirm:')[1]
# #     await logger.info(f'Confirm: {confirm}')
# #     if confirm == '–î–∞':
# #         await remove_user_from_course(message=callback)
# #         await callback.message.edit_text(
# #             text='‚òëÔ∏è –í—ã —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω—ã! –¢–µ–ø–µ—Ä—å –º–æ–∂–µ—Ç–µ –∑–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –ª—é–±–æ–π –∫—É—Ä—Å',
# #             reply_markup=await make_only_course_managing_keyboard())
# #     else:
# #         await callback.message.edit_text(
# #             text='üìå –í—ã –æ—Å—Ç–∞–ª–∏—Å—å –Ω–∞ –ø—Ä–µ–∂–Ω–µ–º –∫—É—Ä—Å–µ',
# #             reply_markup=await make_courses_keyboard())
