from pydantic import BaseModel
import aiogram
import aiogram
from aiogram.utils.text_decorations import html_decoration as hd
from datetime import datetime
import pytz 
import asyncio

from utils.logging.logger import logger
from utils.db.models import (
    get_access_users,
    remove_user_from_access
)
from utils.texts import you_are_not_access_user


async def user_access_is_active(bot: aiogram.client.bot.Bot):
    logger.info(f"–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–æ–≤...")

    users = await get_access_users()
    deleted_users = []
    notified_users = [] 
    done_users = []

    users_checked = 0
    
    for i in users:
        await asyncio.sleep(0.5)

        end_time_date = i.end_time
        current_now = datetime.now()
        current_time_str = current_now.strftime("%Y-%m-%d %H:%M:%S")
        current_date = datetime.strptime(current_time_str, "%Y-%m-%d %H:%M:%S")
        diff = (end_time_date - current_date).days

        try:
            if 2 >= diff > 0:
                notified_users.append(i.user_id)
                logger.info(f'üëÆ –ù–∞–ø–æ–º–Ω–∏–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é({i.user_id}) –æ –æ–∫–æ–Ω—á–∞–Ω–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏ {diff} –¥–Ω–µ–π')
                await bot.send_message(
                    chat_id=i.user_id,
                    text='‚ùó –í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –∑–∞–∫–æ–Ω—á–∏—Ç—Å—è –º–µ–Ω–µ–µ —á–µ–º —á–µ—Ä–µ–∑ 2 –¥–Ω—è! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –∑–∞—Ä–∞–Ω–µ–µ –ø—Ä–æ–¥–ª–∏—Ç–µ –¥–æ—Å—Ç—É–ø —á–µ—Ä–µ–∑ –±–æ—Ç–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏!'
                )

            if diff <= 0:
                logger.info(f'üëÆ –£–¥–∞–ª–∏–ª –ø–æ–¥–ø–∏—Å–∫—É {diff} –¥–Ω–µ–π —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {i.user_id}')
                deleted_users.append(i.user_id)
                await bot.send_message(
                    chat_id=i.user_id,
                    text=f'‚ùå –ü–æ–¥–ø–∏—Å–∫–∞ –∑–∞–∫–æ–Ω—á–∏–ª–∞—Å—å!\n{you_are_not_access_user}',
                )
                await remove_user_from_access(i.user_id)
            users_checked += 1
        except Exception as e:
            if 'chat not found' in str(e):
                logger.error(f'–ß–∞—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω: {e}, user: {i.user_id}')
                continue
                
    logger.info(
        f"üëÅÔ∏è‚Äçüó®Ô∏è –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –†–µ–∑—É–ª—å—Ç–∞—Ç—ã: {users_checked}/{len(users)}")
