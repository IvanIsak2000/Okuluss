import requests
from decimal import Decimal

from utils.logging.logger import logger
from utils.db.models import (
    add_utilized_hash,
    hash_was_used)

SERVER_ERROR = {
    'status': False,
    'error_message': 'üîß –°–µ—Ä–≤–µ—Ä –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–ø–æ–∑–∂–µ'
}

ERR_HASH_WAS_USED = {
    'status': False,
    'error_message': '‚ùå –¢–∞–∫–æ–π —Ö—ç—à —É–∂–µ –±—ã–ª –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω!'
}

ERR_HASH_WAS_NOT_FIND = {
    'status': False,
    'error_message': '‚ùå –•—ç—à –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å —Ö—ç—à–∞!'
}

SUCCESS = {
    'status': True,
    'error_message': ''
}


class CheckHash():
    """–ö–ª–∞—Å—Å –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –ø–æ `tronscan.org` API –∏ –≤—ã–¥–∞–µ—Ç dict, –≤ –∫–æ—Ç–æ—Ä–æ–º status==True\n
    –ü–∞—Ä–∞–º–µ—Ç—Ä—ã:\n
    - user_id: int - id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    - hash: str - —Ö—ç—à, –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
    """
    def __init__(self) -> None:
        pass

    async def user_hash_existed(self) -> dict[bool, str]:
        """–§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —á—Ç–æ —Ç–∞–∫–∞—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –ø–æ —Ö—ç—à—É –±—ã–ª–∞"""
        try:
            text_uint = float(
                self.response.json()['trc20TransferInfo'][0]['amount_str'])
            logger.info(f"–°—É–º–º–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏: {text_uint} –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {self.user_id}")
            if text_uint >= 3000000:
                return SUCCESS
            else:
                return {
                    'status': False,
                    'error_message': f"–°—É–º–º–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –Ω–µ –ø—Ä–∞–≤–∏–ª—å–Ω–∞!"
                }
        except KeyError:
            return ERR_HASH_WAS_NOT_FIND
        except Exception as e:
            logger.critical(e)
            return {
                'status': False,
                'error_message': str(e)
            }

    async def check_hash(
            self,
            user_id: int,
            username: str,
            hash: str) -> dict[bool, str]:
        """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∫–ª–∞—Å—Å–∞"""

        self.user_id = user_id
        self.hash = hash
        logger.info(
            f'–ù–∞—á–∞–ª–æ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏: user={self.user_id}, hash={self.hash}...')
        url = f'https://apilist.tronscanapi.com/api/transaction-info?hash={self.hash}'
        self.response = requests.get(url)

        if not await hash_was_used(hash=self.hash):
            if self.response.status_code == 200:
                return await self.user_hash_existed()
            else:
                return SERVER_ERROR
        else:
            return ERR_HASH_WAS_USED
