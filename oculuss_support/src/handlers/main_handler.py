from aiogram import Router, F
from aiogram import types
from aiogram.filters import Command
from aiogram.enums import ParseMode
from aiogram.utils.keyboard import InlineKeyboardBuilder

from utils.db.models import (
    add_know_user,
    get_access_user_data
)

from kb.make_inline_keyboard import (
    make_inline_keyboard,
    make_support_keyboard

)
from utils.db.models import is_access_user, add_new_access_user

from utils.logging.logger import logger
from utils.texts import (
    access_info_step_1,
    access_info_step_2,
    welcome_support,
    help_info,
    you_are_access_user,
    you_are_not_access_user
)

router = Router()


@router.message(Command('menu'))
async def menu_handler(message: types.Message):
    await add_know_user(message=message)
    # await add_new_access_user(message=message)
    if await is_access_user(message=message):
        user = await get_access_user_data(message.from_user.id)

        await message.answer(
            text=f'üèÜ –¢—ã —É–∂–µ —Å –Ω–∞–º–∏ - @OkulussBot\n\n–û–∫–æ–Ω—á–∞–Ω–∏–µ {user.end_time}'
        )
    else:
        builder = InlineKeyboardBuilder()
        builder.row(
            types.InlineKeyboardButton(
                text='–ü—Ä–æ–¥–æ–ª–∂–∞–π...',
                callback_data='next',
            )
        )
        builder.row(
            types.InlineKeyboardButton(
                text='–ú–Ω–µ –Ω–µ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ',
                callback_data='no_interest'
            )
        )
        await message.answer(
            text='''
‚öóÔ∏è –ò–∑ –∫–∞–∂–¥–æ–≥–æ —É—Ç—é–≥–∞ –∫—Ä–∏—á–∞—Ç—å –ë–ê–î—ã, –≤–∏–¥–∏—à—å –∫–∞–∫ –∫–∞–∂–¥—ã–π 
—É—Å–ø–µ—à–Ω—ã–π —á–µ–ª–æ–≤–µ–∫ –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –ë–ê–î–´, 
–Ω–æ –¢–´ –Ω–µ –ø–æ–Ω–∏–º–∞–µ—à—å —á—ë –∑–∞ —Ö–µ—Ä–Ω—é –æ–Ω–∏ –≥–æ–≤–æ—Ä—è—Ç?

üß© –ó–∞–µ–±–∞–ª—Å—è —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ –≤—ã—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å –ø–æ –æ–¥–Ω–æ–π 
–¥–æ–±–∞–≤–∫–∏ –Ω–∞ –º–∏–ª–ª–∏–æ–Ω–µ –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å–æ–≤ –∏ –Ω–µ–¥–µ–ª—è–º–∏ –∂–¥–∞—Ç—å, 
—á—Ç–æ–±—ã —Å–æ–±—Ä–∞—Ç—å –ø–æ–ª–µ–∑–Ω—ã–π —Å—Ç–∞–∫?

üî≠ –ù–µ –ø–æ–Ω–∏–º–∞–µ—à—å —á—Ç–æ —Ç–∞–∫–æ–µ –ì–ê–ú–ö? –†–∞–ø—ç? –ï–∂–æ–≤–∏–∫?

ü•± –ó–∞–±—ã–≤–∞–µ—à—å –ø—Ä–∏–Ω—è—Ç—å –ø–æ–ª–æ–≤–∏–Ω—É —Å–≤–æ–∏—Ö –¥–æ–±–∞–≤–æ–∫?

üîî –ù–µ —É—Å–ø–µ–≤–∞–µ—à—å –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –∑–∞–∫–∞–Ω—á–∏–≤–∞—é—â–∏–µ—Å—è –¥–æ–±–∞–≤–∫–∏? 

''',    
        reply_markup=builder.as_markup(),
        parse_mode=ParseMode.MARKDOWN_V2)



@router.callback_query(
    F.data == 'no_interest'
)
async def no_interest_handler(callback: types.CallbackQuery):
    await callback.message.answer(
        text='–¢–æ–≥–¥–∞ –∑–∞—á–µ–º —Ç—ã –ø—Ä–∏—à—ë–ª —Å—é–¥–∞!? –ü—Ä–æ–≤–∞–ª–∏–≤–∞–π, –Ω–µ –º–µ—à–∞–π –¥—Ä—É–≥–∏–º –ª—é–¥—è–º.'
    )


@router.callback_query(
    F.data == 'next'
)
async def next_handler(callback: types.CallbackQuery):
    builder = InlineKeyboardBuilder()
    builder.row(
        types.InlineKeyboardButton(
            text='–ö–∞–∫–æ–µ?',
            callback_data='to_access'
        )

    )
    await callback.message.answer(
        text='üëÄ –ü—Ä–µ–≤–æ—Å—Ö–æ–¥–Ω–æ\n\n–ü–æ—ç—Ç–æ–º—É –Ø —Ö–æ—á—É –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å —Ç–µ–±–µ –æ—Å–æ–±–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ...',
        reply_markup=builder.as_markup(),
    )


@router.callback_query(
    F.data == 'to_access'
)
async def to_access_handler(callback: types.CallbackQuery):
    builder  = InlineKeyboardBuilder()
    builder.row(
        types.InlineKeyboardButton(
            text='–ù–æ, –∫–∞–∫–æ–≤–∞ —Ü–µ–Ω–∞? –ù–µ —É–∂ —Ç–æ –º–∏–ª–ª–∏–æ–Ω?',
            callback_data='to_price'
        )
    )
    await callback.message.answer(
        text=access_info_step_1,
        reply_markup=builder.as_markup(),
        parse_mode=ParseMode.HTML
    )


@router.callback_query(
    F.data == 'to_price'
)
async def get_second_access_info_step(callback: types.CallbackQuery):
    builder = InlineKeyboardBuilder()
    builder.row(
        types.InlineKeyboardButton(
            text='–Ø –¥–æ—Å—Ç–æ–∏–Ω',
            callback_data='choose_payment'
        )
    )

    await callback.message.answer(
        text=access_info_step_2,
        reply_markup=builder.as_markup()
    )
        